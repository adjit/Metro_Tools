<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="trxQuery" xml:space="preserve">
    <value>Select * From SOP10107 Where Tracking_Number='{0}' and SOPTYPE=3</value>
    <comment>Query to lookup invoice by tracking number</comment>
  </data>
  <data name="ccQuery" xml:space="preserve">
    <value>Select 
	LS.DOCDATE,
	cc.SOPNUMBE,
	cc.CARDNAME,
	cc.RCTNCCRD
FROM Metro.dbo.SOP10103 cc
Join (
	select * from Metro.dbo.SOP30200 h
	Where h.CUSTNMBR = '{0}' AND h.SOPTYPE = 3
	AND h.DOCDATE &gt; dateadd(m, -12, getdate() - datepart(d, getdate()) + 1)
) LS

ON LS.SOPNUMBE = cc.SOPNUMBE
ORDER BY LS.DOCDATE DESC</value>
    <comment>Query to get last 12 months credit card</comment>
  </data>
  <data name="serialQuery" xml:space="preserve">
    <value>Select * From SOP10202 Where CMMTTEXT like '%{0}%' and SOPTYPE=3</value>
    <comment>Query to lookup invoice by serial numbers</comment>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="UnderConstruction2" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\UnderConstruction2.gif;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="UnderConstruction-PS" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\UnderConstruction-PS.gif;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="custExportQuery" xml:space="preserve">
    <value>Select
	tr.SOPNUMBE as 'Invoice Number',
	tr.QUANTITY as 'Qty',
	tr.ITEMNMBR as 'Product Number',
	tr.ITEMDESC as 'Product Description',
	tr.UNITPRCE as 'Unit Price',
	tr.XTNDPRCE as 'Extended Price',
	tx.Tracking_Number,
	shv.[Delivery Description],
	isnull(st.CMMTTEXT, 'No Serial Number') as 'Serial Numbers'
From
	Metro.dbo.SOP30200 th,
	Metro.dbo.SOP10107 tx,
	StarShip.dbo.ShipmentHeaderView shv,
	Metro.dbo.SOP30300 tr

	Left Join Metro.dbo.SOP10202 st
	on	tr.SOPNUMBE = st.SOPNUMBE AND
		tr.LNITMSEQ = st.LNITMSEQ

Where
	th.CUSTNMBR = '{0}' AND
	th.DOCDATE between '{1}' and '{2}' AND
	th.SOPTYPE = 3 AND
	tr.SOPNUMBE = th.SOPNUMBE AND
	tr.XTNDPRCE &gt; 0 AND
	tx.SOPNUMBE = tr.SOPNUMBE AND
	tx.Tracking_Number = shv.[Master Tracking Number]

Order By [Invoice Number]</value>
    <comment>Query to get Customer orders between a date range. Needs to be cross referenced with the custReferenceExport Query to make sure values are not missing</comment>
  </data>
  <data name="custReferenceExportQuery" xml:space="preserve">
    <value>Select
	tr.SOPNUMBE,
	tr.QUANTITY as 'Qty',
	tr.ITEMNMBR,
	tr.ITEMDESC,
	tr.UNITPRCE,
	tr.XTNDPRCE,
	st.CMMTTEXT
From
	Metro.dbo.SOP30200 th,
	Metro.dbo.SOP30300 tr

	Left Join Metro.dbo.SOP10202 st
	on	tr.SOPNUMBE = st.SOPNUMBE AND
		tr.LNITMSEQ = st.LNITMSEQ

Where
	th.CUSTNMBR = '{0}' AND
	th.DOCDATE between '{1}' and '{2}' AND
	th.SOPTYPE = 3 AND
	tr.SOPNUMBE = th.SOPNUMBE AND 
	tr.XTNDPRCE &gt; 0

Order by SOPNUMBE</value>
    <comment>Customer cross reference query to check for rows left out of the custExportQuery</comment>
  </data>
  <data name="invoiceTrxQuery" xml:space="preserve">
    <value>Select TOP 1 *
From
	Metro.dbo.SOP10107 tx
Where
	tx.SOPNUMBE = '{0}' AND
	tx.SOPTYPE = 3
Order by tx.DEX_ROW_ID</value>
    <comment>Query to lookup tracking number by invoice</comment>
  </data>
</root>